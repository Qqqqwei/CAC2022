clear all;
close all;
clc;
global K A B refState;
xn = 8;
un = 4;
positionArray = [4,7;9,5;5,5];
velocityArray = [0.1,0.1;0.1,0.1;0.1,0.1];
accelArray = [0,0;0,0;0,0];
timeArray = [0,4];
refPosition = [];
positionAll=[];vAll=[];aAll=[];tAll=[];kall=[];
for i=1:1:size(positionArray,2)-1
    T=timeArray(i+1)-timeArray(i);
    a0=positionArray(:,i);
    a1=velocityArray(:,i);
    a2=accelArray(:,i)/2;
    a3=(20*positionArray(:,i+1)-20*positionArray(:,i)-(8*velocityArray(:,i+1)+12*velocityArray(:,i))*T-(3*accelArray(:,i)-accelArray(:,i+1))*T^2)/(2*T^3);
    a4=(30*positionArray(:,i)-30*positionArray(:,i+1)+(14*velocityArray(:,i+1)+16*velocityArray(:,i))*T+(3*accelArray(:,i)-2*accelArray(:,i+1))*T^2)/(2*T^4);
    a5=(12*positionArray(:,i+1)-12*positionArray(:,i)-(6*velocityArray(:,i+1)+6*velocityArray(:,i))*T-(accelArray(:,i)-accelArray(:,i+1))*T^2)/(2*T^5);
    flag = 0;
    for t=timeArray(i)+0.1:0.1:timeArray(i+1)
        qi=a0+a1*(t-timeArray(i))+a2*(t-timeArray(i)).^2+a3*(t-timeArray(i)).^3+a4*(t-timeArray(i)).^4+a5*(t-timeArray(i)).^5;
        vi=a1+2*a2*(t-timeArray(i))+3*a3*(t-timeArray(i)).^2+4*a4*(t-timeArray(i)).^3+5*a5*(t-timeArray(i)).^4;
        ai=2*a2+6*a3*(t-timeArray(i))+12*a4*(t-timeArray(i)).^2+20*a5*(t-timeArray(i)).^3;
        p = a0 + a1*t + a2*t^2 + a3*t^3 + a4*t^4 + a5*t^5;
        dotp = a1 + 2*a2*t + 3*a3*t^2 + 4*a4*t^3 + 5*a5*t^4;
        ddotp = 2*a2 + 6*a3*t + 12*a4*t^2 + 20*a5*t^3;
        ki = norm(ddotp)^2/(1 + norm(dotp)^2)^3;
        if(ki >= 0.3 && ki <= 5)
            t1 = t - 0.05;
            t2 = t + 0.05;            
            qi1=a0+a1*(t1-timeArray(i))+a2*(t1-timeArray(i)).^2+a3*(t1-timeArray(i)).^3+a4*(t1-timeArray(i)).^4+a5*(t1-timeArray(i)).^5;
            qi2=a0+a1*(t2-timeArray(i))+a2*(t2-timeArray(i)).^2+a3*(t2-timeArray(i)).^3+a4*(t2-timeArray(i)).^4+a5*(t2-timeArray(i)).^5;
            refPosition = [refPosition,qi1,qi,qi2]; 
        else
            if(flag == 0)
                refPosition = [refPosition,qi];
                flag = 1;
            else
                flag = 0;
                positionAll=[positionAll,qi];
                continue;                
            end
        end        
        tAll=[tAll,t];positionAll=[positionAll,qi];vAll=[vAll,vi];aAll=[aAll,ai];kall = [kall,ki];
    end
end

allAngle = zeros(size(refPosition,2),8);
Q = diag([10,0,10,0,10,0,10,0]);
R = 0.1*eye(4);
stateSave = [];
errorSave = [];
Kerror = [];
KAll = [];

for i = 1:1:size(refPosition,2)  
    tmp = solveAngle(refPosition(:,i));
    allAngle(i,1:8) = [tmp(1) 0 tmp(2) 0 tmp(3) 0 tmp(4) 0];
    BucketAngle = rad2deg(tmp(1));
    StickAngle = rad2deg(tmp(2));
    BoomAngle = rad2deg(tmp(3));
    SwingAngle = rad2deg(tmp(4));
    open_system('Excavator1');
    io = getlinio('Excavator1');
    sys = linearize('Excavator1',io);  
    A = sys.A;
    B = sys.B; 
    if i==1
        x0 = allAngle(1,:)';
        [K0,P0] = lqr(A,B,Q,R);
    else
        x0 = allAngle(i-1,:)';
        K0 = K;
    end
    X=[x0;kron(x0',x0')';kron(x0,zeros(un,1))]';
    K = ADP(X,A,B,Q,R,K0);
    KAll = [KAll K];
    Kerror = [Kerror norm(K - K0)];
    refState = [allAngle(i,1) 0 allAngle(i,3) 0 allAngle(i,5) 0 allAngle(i,7) 0]';  
    curState = x0;
    X = [x0;0;0;0;0;0;0;0;0];
    while(norm(curState - refState)>0.1)
        [t,XX]=ode45(@mysys1, [0,10],X);   
    end
    stateSave = [stateSave; curState'];
    errorSave = [errorSave, curState - refState];   
end
angleSave = [stateSave(:,1) stateSave(:,3) stateSave(:,5) stateSave(:,7)];
perError = [errorSave(1,:);errorSave(3,:);errorSave(5,:);errorSave(7,:)];
for i = 1:1: size(angleSave,1)
    curPosition(i,:) = kinematics(angleSave(i,:));
end
figure
plot3(curPosition(:,1),curPosition(:,2),curPosition(:,3),'r*');
xlabel('x');
ylabel('y');
zlabel('z');
grid on
title('Actual Position')
figure
plot(1:size(perError,2),perError(1,:),1:size(perError,2),perError(2,:),1:size(perError,2),perError(3,:),1:size(perError,2),perError(4,:));
xlabel('time');
ylabel('rad');


figure
subplot(3,1,1);
plot3(positionAll(1,:),positionAll(2,:),positionAll(3,:),'r-');
xlabel('x');
ylabel('y');
zlabel('z');
grid on
title('P_{x^{*}}')
subplot(3,1,2);
plot3(refPosition(1,:),refPosition(2,:),refPosition(3,:),'b*');
xlabel('x');
ylabel('y');
zlabel('z');
grid on
title('P_{Int}')
subplot(3,1,3);
plot3(curPosition(:,1),curPosition(:,2),curPosition(:,3),'r*');
xlabel('x');
ylabel('y');
zlabel('z');
grid on
title('Actual Position')


function ddX = mysys1(t,X)   
    global K A B refState;
    x = X(1:8);
    eta = X(9:end);
    e = x - refState;
    K_I = [10*eye(4) zeros(4)];
    u=- K *x -K_I*eta;
    dx = A *x+ B * u;
    d_eta = e;     
    ddX = [dx;d_eta];

end

function angle = solveAngle(ref)
    L1 = 2.86;
    L2 = 4;
    L3 = 9.36;
    x_d = ref(1);
    y_d = ref(2); 
    z_d = ref(3);
    q_bar = 1.5;
    if(abs(x_d - 0.01)<0.02)
        x_d = x_d +0.01;
    end
    if( x_d>= 0 && y_d>=0 )
        theta4 = atan(y_d/x_d);
    elseif( x_d<0 && y_d>=0 )
        theta4 = 3.14 + atan(y_d/x_d);
    elseif( x_d<0 && y_d<0 )
        theta4 = 3.14 + atan(y_d/x_d);
    elseif(x_d>=0 && y_d<0)
        theta4 = 6.28 + atan(y_d/x_d);
    else
        theta4 = 0;
    end
    x_d = x_d/cos(theta4);
    x_c = x_d + L1*cos(q_bar);
    z_c = z_d + L1*sin(q_bar);
    AD = sqrt(x_d^2 + z_d^2);
    AC = sqrt(x_c^2 + z_c^2);
    temp_1 = real(atan(z_d / x_d));
    temp_2 = real(atan(z_c / x_c));
    beta = temp_2 - temp_1;
    gamma = real(acos(complex((L3^2 + AC^2 - L2^2)/(2*L3*AC))));
    theta3 = temp_1 + beta + gamma;
    theta2 = real(acos(complex((L3^2 + L2^2 - AC^2)/(2*L3*L2))));
    temp_3 = real(acos(complex((L2^2 + AC^2 - L3^2)/(2*L2*AC))));
    temp_4 = real(acos(complex((L1^2 + AC^2 -AD^2)/(2*L1*AC))));
    if temp_1<temp_2
        theta1 = temp_3 + temp_4;
    else
        theta1 = temp_3 - temp_4;
    end
    angle = [theta1 theta2 theta3 theta4];
end

function curPosition = kinematics(curAngle)
    L1 = 2.86;
    L2 = 4;
    L3 = 9.36;
    cur_x = cos(curAngle(4))*(L3*cos(curAngle(3))-L2*cos(curAngle(3)+curAngle(2))+L1*cos(curAngle(3)+curAngle(2)+curAngle(1)));
    cur_z = L3*sin(curAngle(3))-L2*sin(curAngle(3)+curAngle(2))+L1*sin(curAngle(3)+curAngle(2)+curAngle(1));
    cur_y = sin(curAngle(4))*(L3*cos(curAngle(3))-L2*cos(curAngle(3)+curAngle(2))+L1*cos(curAngle(3)+curAngle(2)+curAngle(1)));
    curPosition = [cur_x cur_y cur_z];
end
